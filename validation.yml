Adv\Nodeping\Checks\Check:
  properties:
    id:
      - Type:
          type: string
      - NotNull: { groups: [update] }
    customerId:
      - Type:
          type: string
      - NotNull: { groups: [create,update] }
    type:
      - Choice:
          callback: Adv\Nodeping\Checks\Fields\Type::get
      - NotNull: ~
    target:
      - Type:
          type: string
      - Expression:
          expression: 'value or this.getType() in [
            constant("Adv\\Nodeping\\Checks\\Fields\\Type::DNS"),
          ]'
          groups: [create]
    label:
      - Type:
          type: string
    interval:
      - Type:
          type: int
      - Range:
          min: 1
    enabled:
      - Type:
          type: string
      - Choice:
          choices: ['true', 'false', 'active']
    public:
      - Type:
          type: string
      - Choice:
          choices: ['true', 'false']
    runLocations:
      - Type:
          type: array
      - Choice:
          callback: Adv\Nodeping\Checks\Fields\RunLocations::get
          multiple: true
    threshold:
      - Type:
          type: int
      - Range:
          min: 1
    sens:
      - Type:
          type: int
      - Range:
          min: 1
    notifications:
      - Type:
          type: array
      - Valid: ~
    dep:
      - Type:
          type: string
    contentString:
      - Expression:
          expression: '!value or this.getType() in [
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::DNS"),
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::HTTPCONTENT"),
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::HTTPADV"),
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::FTP"),
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::SSH"),
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::WEBSOCKET"),
            ]'
      - Type:
          type: string
    customerId:
      - Type:
          type: string
    dnsType:
      - Type:
          type: string
      - Expression:
          expression: '!value or this.getType() in [constant("Adv\\Nodeping\\Checks\\Fields\\Type::DNS")]'
      - Choice:
          callback: Adv\Nodeping\Checks\Fields\DnsType::get
    dnsToResolve:
      - Type:
          type: string
      - Expression:
          expression: '!value or this.getType() in [constant("Adv\\Nodeping\\Checks\\Fields\\Type::DNS")]'
    follow:
      - Type:
          type: boolean
      - Expression:
          expression: '!value or this.getType() in [
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::HTTP"),
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::HTTPCONTENT"),
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::HTTPADV"),
            ]'
    email:
      - Type:
          type: string
      - Expression:
          expression: '!value or this.getType() in [
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::IMAP"),
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::SMTP"),
            ]'
    port:
      - Type:
          type: integer
      - Expression:
          expression: '(value and this.getType() in [
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::PORT"),
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::NTP"),
            ]) or (!value or this.getType() in [
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::DNS"),
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::FTP"),
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::SSH"),
            ])'
    username:
      - Type:
          type: string
      - Expression:
          expression: '!value or this.getType() in [
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::FTP"),
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::IMAP4"),
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::POP3"),
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::SMTP"),
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::SSH"),
            ]'
    password:
      - Type:
          type: string
      - Expression:
          expression: '!value or this.getType() in [
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::FTP"),
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::IMAP4"),
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::POP3"),
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::SMTP"),
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::SSH"),
            ]'
    secure:
      - Type:
          type: string
      - Expression:
          expression: '!value or (this.getType() in [
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::IMAP4"),
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::SMTP"),
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::POP3"),
            ] and value in ["false", "ssl"])'
    verify:
      - Type:
          type: string
      - Choice:
          choices: ['true', 'false']
    ignore:
      - Type:
          type: string
    invert:
      - Type:
          type: string
      - Choice:
          choices: ['true', 'false']
      - Expression:
          expression: '!value or this.getType() in [
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::FTP"),
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::HTTPCONTENT"),
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::HTTPADV"),
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::NTP"),
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::PORT"),
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::SSH"),
            ]'
    warningDays:
      - Type:
          type: integer
      - Expression:
          expression: '!value or this.getType() in [
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::SSL"),
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::POP"),
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::IMAP"),
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::SMTP"),
            ]'
    fields:
      - Valid: ~
      - Expression:
          expression: '!value or this.getType() in [
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::HTTPADV"),
            ]'
    postData:
      - Type:
          type: string
      - Expression:
          expression: '!value or this.getType() in [
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::HTTPADV"),
            ]'
    data:
      - Type:
          type: array
      - Expression:
          expression: '!value or this.getType() in [
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::HTTPADV"),
            ]'
    receiveHeaders:
      - Type:
          type: array
      - Expression:
          expression: '!value or this.getType() in [
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::HTTPADV"),
            ]'
    sendHeaders:
      - Type:
          type: array
      - Expression:
          expression: '!value or this.getType() in [
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::HTTPADV"),
            ]'
    method:
      - Type:
          type: string
      - Choice:
          callback: Adv\Nodeping\Checks\Fields\Method::get
      - Expression:
          expression: '!value or this.getType() in [
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::HTTPADV"),
            ]'
    statusCode:
      - Type:
          type: integer
      - Expression:
          expression: '!value or this.getType() in [
              constant("Adv\\Nodeping\\Checks\\Fields\\Type::HTTPADV"),
            ]'

\Adv\Nodeping\Checks\Fields\Field:
  properties:
    name:
      - NotNull: ~
    min:
      - NotNull: ~
    max:
      - NotNull: ~

Adv\Nodeping\Checks\Fields\Notification:
  properties:
    contactId:
      - NotNull: ~
      - Type:
          type: string
    schedule:
      - NotNull: ~
      - Type:
          type: string
    delay:
      - Type:
          type: int